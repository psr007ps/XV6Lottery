diff -Naur "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/lotteryTest1.c" "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Lottery/xv6-public/lotteryTest1.c"
--- "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/lotteryTest1.c"	1969-12-31 16:00:00.000000000 -0800
+++ "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Lottery/xv6-public/lotteryTest1.c"	2019-11-10 17:54:12.016653100 -0800
@@ -0,0 +1,60 @@
+// This test case is designed for lottery scheduler
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+
+int main(int argc, char *argv[])
+{
+
+    int Scheduler(void);
+
+    Scheduler();
+    return 0;
+}
+
+int Scheduler(void)
+{
+
+    int pid;
+    int i, j, k;
+
+    /*Replace YOUR_SYSCALL_TO_ASSIGN_TICKET with what you implement to assign ticket */
+    settickets(60);
+    for (i = 0; i < 3; i++)
+    {
+        pid = fork();
+        if (pid > 0)
+        {
+            continue;
+        }
+        else if (pid == 0)
+        {
+
+            settickets(30 - 10 * i);
+            for (j = 0; j < 50000; j++)
+            {
+                for (k = 0; k < 50000; k++)
+                {
+                    asm("nop");
+                }
+            }
+            printf(1, "\n  child# %d with %d tickets has finished!  \n", getpid(), 30 - 10 * i);
+            exit();
+        }
+        else
+        {
+            printf(2, "  \n  Error  \n ");
+        }
+    }
+
+    if (pid > 0)
+    {
+        for (i = 0; i < 3; i++)
+        {
+            wait();
+        }
+    }
+    exit();
+    return 0;
+}
\ No newline at end of file
diff -Naur "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/lotteryTest2.c" "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Lottery/xv6-public/lotteryTest2.c"
--- "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/lotteryTest2.c"	1969-12-31 16:00:00.000000000 -0800
+++ "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Lottery/xv6-public/lotteryTest2.c"	2019-11-09 04:10:48.673519800 -0800
@@ -0,0 +1,19 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+int main(int argc, char *argv[])
+{
+ settickets(20); // write your own function here
+ 
+ int i,k;
+ const int loop=43000;
+ for(i=0;i<loop;i++)
+ {
+ //asm(nop); //in order to prevent the compiler from optimizing the for loop
+ for(k=0;k<loop;k++)
+ {
+ //asm(nop);
+ }
+ }
+ exit();
+}
\ No newline at end of file
diff -Naur "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/lotteryTest3.c" "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Lottery/xv6-public/lotteryTest3.c"
--- "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/lotteryTest3.c"	1969-12-31 16:00:00.000000000 -0800
+++ "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Lottery/xv6-public/lotteryTest3.c"	2019-11-09 04:10:39.525167900 -0800
@@ -0,0 +1,19 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+int main(int argc, char *argv[])
+{
+ settickets(10); // write your own function here
+ 
+ int i,k;
+ const int loop=43000;
+ for(i=0;i<loop;i++)
+ {
+ //asm(nop); //in order to prevent the compiler from optimizing the for loop
+ for(k=0;k<loop;k++)
+ {
+ //asm(nop);
+ }
+ }
+ exit();
+}
\ No newline at end of file
diff -Naur "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/param.h" "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Lottery/xv6-public/param.h"
--- "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/param.h"	2019-10-03 22:31:52.242873200 -0700
+++ "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Lottery/xv6-public/param.h"	2019-11-10 18:25:28.568863600 -0800
@@ -1,6 +1,6 @@
 #define NPROC        64  // maximum number of processes
 #define KSTACKSIZE 4096  // size of per-process kernel stack
-#define NCPU          8  // maximum number of CPUs
+#define NCPU          1  // maximum number of CPUs
 #define NOFILE       16  // open files per process
 #define NFILE       100  // open files per system
 #define NINODE       50  // maximum number of active i-nodes
diff -Naur "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/proc.c" "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Lottery/xv6-public/proc.c"
--- "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/proc.c"	2019-10-16 03:07:13.693034700 -0700
+++ "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Lottery/xv6-public/proc.c"	2019-11-10 20:41:07.597839500 -0800
@@ -6,6 +6,7 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "rand.h"
 
 
 struct {
@@ -89,6 +90,7 @@
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->tickets = 10;																//lottery
 
   release(&ptable.lock);
 
@@ -232,6 +234,35 @@
   struct proc *p;
   int fd;
 
+  
+  //lottery
+  /*-------The following code is added to format the output--------*/
+  /* NOTE that you need to replace sched_times in the cprintf with whatever you use to record the execution time */
+  static char *states[] = {
+  [UNUSED]    "unused",
+  [EMBRYO]    "embryo",
+  [SLEEPING]  "sleep ",
+  [RUNNABLE]  "runble",
+  [RUNNING]   "run   ",
+  [ZOMBIE]    "zombie"
+  };
+  char *state;
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->state == UNUSED)
+      continue;
+    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+      state = states[p->state];
+    else
+      state = "???";
+    
+	cprintf("From  %s-%d: %d %s %s sched_times=%d ticket=%d \n", myproc()->name, myproc()->pid, p->pid, state, p->name, p->usage, p->tickets);
+    //cprintf("From  %s-%d: %d %s %s tickets=%d #timeSlices=%d \n", myproc()->name, myproc()->pid, p->pid, state, p->name, p->tickets, myproc()->usage);
+  }
+  /*------------------patch end------------------------ */
+  
+  
+  
+  
   if(curproc == initproc)
     panic("init exiting");
 
@@ -312,6 +343,29 @@
   }
 }
 
+
+
+
+//lottery
+int lottery_Total(void){
+  struct proc *p;
+  int ticket_aggregate=0;
+
+//loop over process table and increment total tickets if a runnable process is found 
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if(p->state==RUNNABLE){
+      ticket_aggregate+=p->tickets;
+    }
+  }
+  return ticket_aggregate;          // returning total number of tickets for runnable processes
+}
+
+
+
+
+
+
 //PAGEBREAK: 42
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
@@ -320,12 +374,18 @@
 //  - swtch to start running that process
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
+//author: Pranshu Shrivastava
+//Lottery Scheduler
 void
 scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
+  int count = 0;								//lottery
+  long golden_ticket = 0;						//lottery
+  int total_no_tickets = 0;						//lottery
+  
   
   for(;;){
     // Enable interrupts on this processor.
@@ -334,10 +394,43 @@
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
 	
+	
+	
+	//lottery
+    //resetting the variables to make scheduler start from the beginning of the process queue
+    golden_ticket = 0;
+    count = 0;
+    total_no_tickets = 0;
+	
+    
+    //calculate Total number of tickets for runnable processes  
+    
+    total_no_tickets = lottery_Total();
+	
+
+    //pick a random ticket from total available tickets
+    golden_ticket = random_at_most(total_no_tickets);
+
+	
+	
+	
+	
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
 		
       if(p->state != RUNNABLE)
         continue;
+	
+	
+		//lottery	
+	     //find the process which holds the lottery winning ticket 
+      if ((count + p->tickets) < golden_ticket){
+        count += p->tickets;
+		
+        continue;
+      }
+
+	
+	
 
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
@@ -345,13 +438,15 @@
       c->proc = p;
       switchuvm(p);
       p->state = RUNNING;
-
+	  //p->totalTickets=total_no_tickets;
+	  p->usage=p->usage+1;
       swtch(&(c->scheduler), p->context);
       switchkvm();
 
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       c->proc = 0;
+	  break;															//lottery
     }
 	
     release(&ptable.lock);
@@ -527,7 +622,8 @@
       state = states[p->state];
     else
       state = "???";
-    cprintf("%d %s %s", p->pid, state, p->name);
+    //cprintf("%d %s %s", p->pid, state, p->name);
+	cprintf("%d %s %sc%d", p->pid, state, p->name, p->tickets);					//lottery
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
@@ -538,7 +634,7 @@
 }
 
 
-
+// @author: Pranshu Shrivastava
 int
 procCount(void)
 {
diff -Naur "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/proc.h" "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Lottery/xv6-public/proc.h"
--- "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/proc.h"	2019-10-11 21:56:58.782976500 -0700
+++ "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Lottery/xv6-public/proc.h"	2019-11-10 18:00:50.001184900 -0800
@@ -50,6 +50,10 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tickets;					//lottery	
+  int usage;
+  
+  
   
 };
 
diff -Naur "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/rand.c" "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Lottery/xv6-public/rand.c"
--- "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/rand.c"	1969-12-31 16:00:00.000000000 -0800
+++ "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Lottery/xv6-public/rand.c"	2019-11-09 02:26:42.439828100 -0800
@@ -0,0 +1,120 @@
+/* A C-program for MT19937: Real number version                */
+/*   genrand() generates one pseudorandom real number (double) */
+/* which is uniformly distributed on [0,1]-interval, for each  */
+/* call. sgenrand(seed) set initial values to the working area */
+/* of 624 words. Before genrand(), sgenrand(seed) must be      */
+/* called once. (seed is any 32-bit integer except for 0).     */
+/* Integer generator is obtained by modifying two lines.       */
+/*   Coded by Takuji Nishimura, considering the suggestions by */
+/* Topher Cooper and Marc Rieffel in July-Aug. 1997.           */
+
+/* This library is free software; you can redistribute it and/or   */
+/* modify it under the terms of the GNU Library General Public     */
+/* License as published by the Free Software Foundation; either    */
+/* version 2 of the License, or (at your option) any later         */
+/* version.                                                        */
+/* This library is distributed in the hope that it will be useful, */
+/* but WITHOUT ANY WARRANTY; without even the implied warranty of  */
+/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.            */
+/* See the GNU Library General Public License for more details.    */
+/* You should have received a copy of the GNU Library General      */
+/* Public License along with this library; if not, write to the    */
+/* Free Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA   */ 
+/* 02111-1307  USA                                                 */
+
+/* Copyright (C) 1997 Makoto Matsumoto and Takuji Nishimura.       */
+/* Any feedback is very welcome. For any question, comments,       */
+/* see http://www.math.keio.ac.jp/matumoto/emt.html or email       */
+/* matumoto@math.keio.ac.jp                                        */
+
+/* Period parameters */  
+#define N 624
+#define M 397
+#define MATRIX_A 0x9908b0df   /* constant vector a */
+#define UPPER_MASK 0x80000000 /* most significant w-r bits */
+#define LOWER_MASK 0x7fffffff /* least significant r bits */
+
+/* Tempering parameters */   
+#define TEMPERING_MASK_B 0x9d2c5680
+#define TEMPERING_MASK_C 0xefc60000
+#define TEMPERING_SHIFT_U(y)  (y >> 11)
+#define TEMPERING_SHIFT_S(y)  (y << 7)
+#define TEMPERING_SHIFT_T(y)  (y << 15)
+#define TEMPERING_SHIFT_L(y)  (y >> 18)
+
+#define RAND_MAX 0x7fffffff
+
+static unsigned long mt[N]; /* the array for the state vector  */
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+    for (mti=1; mti<N; mti++)
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+}
+
+long /* for integer generation */
+genrand()
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+        int kk;
+
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+            sgenrand(4357); /* a default initial seed is used   */
+
+        for (kk=0;kk<N-M;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        for (;kk<N-1;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+    y ^= TEMPERING_SHIFT_U(y);
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+    y ^= TEMPERING_SHIFT_L(y);
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+}
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+
+  // Truncated division is intentional
+  return x/bin_size;
+}
\ No newline at end of file
diff -Naur "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/rand.h" "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Lottery/xv6-public/rand.h"
--- "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/rand.h"	1969-12-31 16:00:00.000000000 -0800
+++ "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Lottery/xv6-public/rand.h"	2019-11-09 02:27:34.972387000 -0800
@@ -0,0 +1,3 @@
+void sgenrand(unsigned long);
+long genrand(void);
+long random_at_most(long);
\ No newline at end of file
diff -Naur "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/syscall.c" "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Lottery/xv6-public/syscall.c"
--- "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/syscall.c"	2019-10-16 00:21:15.582414300 -0700
+++ "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Lottery/xv6-public/syscall.c"	2019-11-09 02:14:31.140839000 -0800
@@ -106,6 +106,7 @@
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_info(void);
+extern int sys_settickets(void);					//lottery
 
 
 static int (*syscalls[])(void) = {
@@ -131,6 +132,7 @@
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_info]   sys_info,
+[SYS_settickets] sys_settickets,					//lottery
 
 };
 
diff -Naur "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/syscall.h" "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Lottery/xv6-public/syscall.h"
--- "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/syscall.h"	2019-10-16 00:01:53.210446700 -0700
+++ "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Lottery/xv6-public/syscall.h"	2019-11-09 02:15:14.411564900 -0800
@@ -21,4 +21,5 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_info  22
+#define SYS_settickets 23
 
diff -Naur "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/sysproc.c" "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Lottery/xv6-public/sysproc.c"
--- "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/sysproc.c"	2019-10-16 00:43:44.424809600 -0700
+++ "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Lottery/xv6-public/sysproc.c"	2019-11-09 02:44:40.442447100 -0800
@@ -131,3 +131,23 @@
 
 
 
+
+//lottery
+//function to set the tickets for the lottery test
+int
+sys_settickets(void){
+  int ticket_number;
+  if (argint(0, &ticket_number) < 0)
+  {
+     myproc()->tickets = 10; 	//setting the default value
+  }
+  else{
+     myproc()->tickets = ticket_number;
+  }
+  return 0;
+}
+
+
+
+
+
diff -Naur "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/user.h" "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Lottery/xv6-public/user.h"
--- "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6/xv6-public/user.h"	2019-10-16 00:03:15.799294900 -0700
+++ "/mnt/c/Users/pranshu shrivastava/Desktop/Schedulers/XV6_Lottery/xv6-public/user.h"	2019-11-09 02:17:06.326005900 -0800
@@ -24,6 +24,7 @@
 int sleep(int);
 int uptime(void);
 int info(int);
+int settickets(int);
 
 
 // ulib.c
